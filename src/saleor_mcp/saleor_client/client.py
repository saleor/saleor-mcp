# Generated by ariadne-codegen
# Source: src/saleor_mcp/graphql

from typing import Any, Dict, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .input_types import (
    CustomerWhereInput,
    OrderSortingInput,
    OrderWhereInput,
    ProductOrder,
    ProductWhereInput,
    StockFilterInput,
    UserSortingInput,
)
from .list_channels import ListChannels
from .list_customers import ListCustomers
from .list_orders import ListOrders
from .list_products import ListProducts
from .list_stocks import ListStocks
from .warehouse_details import WarehouseDetails


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def list_channels(self, **kwargs: Any) -> ListChannels:
        query = gql(
            """
            query ListChannels {
              channels {
                id
                slug
                name
                isActive
                currencyCode
                defaultCountry {
                  code
                }
                warehouses {
                  id
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="ListChannels", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListChannels.model_validate(data)

    async def list_customers(
        self,
        first: Union[Optional[int], UnsetType] = UNSET,
        sortBy: Union[Optional[UserSortingInput], UnsetType] = UNSET,
        where: Union[Optional[CustomerWhereInput], UnsetType] = UNSET,
        search: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> ListCustomers:
        query = gql(
            """
            query ListCustomers($first: Int, $sortBy: UserSortingInput, $where: CustomerWhereInput, $search: String) {
              customers(first: $first, sortBy: $sortBy, where: $where, search: $search) {
                pageInfo {
                  hasNextPage
                  hasPreviousPage
                  startCursor
                  endCursor
                }
                totalCount
                edges {
                  node {
                    id
                    email
                    firstName
                    lastName
                    isActive
                    isConfirmed
                    checkouts {
                      totalCount
                    }
                    orders {
                      totalCount
                    }
                    languageCode
                    lastLogin
                    dateJoined
                    defaultShippingAddress {
                      firstName
                      lastName
                      streetAddress1
                      streetAddress2
                      country {
                        code
                      }
                      postalCode
                    }
                    defaultBillingAddress {
                      firstName
                      lastName
                      streetAddress1
                      streetAddress2
                      country {
                        code
                      }
                      postalCode
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "first": first,
            "sortBy": sortBy,
            "where": where,
            "search": search,
        }
        response = await self.execute(
            query=query, operation_name="ListCustomers", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListCustomers.model_validate(data)

    async def list_orders(
        self,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        sortBy: Union[Optional[OrderSortingInput], UnsetType] = UNSET,
        where: Union[Optional[OrderWhereInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> ListOrders:
        query = gql(
            """
            query ListOrders($first: Int, $after: String, $sortBy: OrderSortingInput, $where: OrderWhereInput) {
              orders(first: $first, after: $after, sortBy: $sortBy, where: $where) {
                pageInfo {
                  hasNextPage
                  hasPreviousPage
                  startCursor
                  endCursor
                }
                totalCount
                edges {
                  node {
                    id
                    number
                    status
                    created
                    updatedAt
                    paymentStatus
                    userEmail
                    total {
                      gross {
                        amount
                        currency
                      }
                    }
                    lines {
                      quantity
                      productSku
                      variant {
                        name
                        product {
                          id
                          name
                        }
                      }
                      unitPrice {
                        gross {
                          currency
                          amount
                        }
                      }
                    }
                    shippingAddress {
                      ...Address
                    }
                    billingAddress {
                      ...Address
                    }
                  }
                }
              }
            }

            fragment Address on Address {
              firstName
              lastName
              streetAddress1
              streetAddress2
              country {
                code
              }
              postalCode
            }
            """
        )
        variables: Dict[str, object] = {
            "first": first,
            "after": after,
            "sortBy": sortBy,
            "where": where,
        }
        response = await self.execute(
            query=query, operation_name="ListOrders", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListOrders.model_validate(data)

    async def list_products(
        self,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        channel: Union[Optional[str], UnsetType] = UNSET,
        where: Union[Optional[ProductWhereInput], UnsetType] = UNSET,
        sortBy: Union[Optional[ProductOrder], UnsetType] = UNSET,
        search: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> ListProducts:
        query = gql(
            """
            query ListProducts($first: Int, $after: String, $channel: String, $where: ProductWhereInput, $sortBy: ProductOrder, $search: String) {
              products(
                first: $first
                after: $after
                channel: $channel
                where: $where
                sortBy: $sortBy
                search: $search
              ) {
                pageInfo {
                  hasNextPage
                  hasPreviousPage
                  startCursor
                  endCursor
                }
                totalCount
                edges {
                  node {
                    id
                    name
                    slug
                    externalReference
                    productType {
                      id
                      name
                    }
                    category {
                      id
                      name
                    }
                    created
                    updatedAt
                    pricing {
                      priceRange {
                        start {
                          gross {
                            currency
                            amount
                          }
                        }
                        stop {
                          gross {
                            currency
                            amount
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "first": first,
            "after": after,
            "channel": channel,
            "where": where,
            "sortBy": sortBy,
            "search": search,
        }
        response = await self.execute(
            query=query, operation_name="ListProducts", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListProducts.model_validate(data)

    async def list_stocks(
        self,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        filter: Union[Optional[StockFilterInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> ListStocks:
        query = gql(
            """
            query ListStocks($first: Int, $after: String, $filter: StockFilterInput) {
              stocks(first: $first, after: $after, filter: $filter) {
                pageInfo {
                  hasNextPage
                  hasPreviousPage
                  startCursor
                  endCursor
                }
                totalCount
                edges {
                  node {
                    id
                    quantity
                    quantityAllocated
                    warehouse {
                      id
                    }
                    productVariant {
                      id
                      name
                      product {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "first": first,
            "after": after,
            "filter": filter,
        }
        response = await self.execute(
            query=query, operation_name="ListStocks", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListStocks.model_validate(data)

    async def warehouse_details(
        self, id: Union[Optional[str], UnsetType] = UNSET, **kwargs: Any
    ) -> WarehouseDetails:
        query = gql(
            """
            query WarehouseDetails($id: ID) {
              warehouse(id: $id) {
                id
                name
                slug
                address {
                  firstName
                  lastName
                  streetAddress1
                  streetAddress2
                  city
                  postalCode
                }
                clickAndCollectOption
                shippingZones(first: 100) {
                  edges {
                    node {
                      id
                      name
                      description
                      channels {
                        id
                        slug
                        name
                      }
                      countries {
                        code
                        country
                      }
                    }
                  }
                }
                metadata {
                  key
                  value
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="WarehouseDetails",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return WarehouseDetails.model_validate(data)
